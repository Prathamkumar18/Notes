📌Docker Overview
Docker is used in containerizing applications, making them easy to build, share, and run in isolated environments. It solves key issues like:

Dependency Management: Addresses the "it works on my machine" problem.
Easy to Migrate code and is Scalable and Portable.
Isolation: Containers run independently from each other.
Resource Efficiency: Containers are more lightweight than VMs.

📌Three parts-
1)Runtime: to start and stop container.
 a)Runc- Low level container runtime - to create and run containers.
 b)containerd- High level container runtime - to manage the entire lifecycle of container like creating,running,deleting, and networking.

2)Engine:
 a)Docker Daemon-It listens the Docker API req. and manages lifecycle.
 b)Docker client-It is CLI tool that allows user to interact with container,images,networks and docker resources.

3)Orchaestration:Process of managing, deploying, load balancing and scaling multiple docker containers across a cluster of machines. Popular tools are Docker Swarm(built-in),kubernetes

📌
.A Dockerfile is a text file that contains the instructions needed to build a Docker image(class) and in turn that can then be used to run containers(obj).
.A .dockerignore file can be used to ignore files while creating imgs
.Docker Hub registry is a cloud-based repository for Docker images. It is used for sharing and storing Docker images.
.An image is a static, immutable blueprint for creating containers, while a container is a dynamic, running instance of an image. Images are used for building and sharing applications, while containers are used for running and managing applications.
.Container is an isolated environment as we can have multiple instance of an image in multiple ports.
.For random port use 0. It will help in solving the conflict of the port.
.Docker Compose file is a YAML file that defines and runs multi-container Docker applications.(docker-compose.yaml or docker-compose.yml)
.A Dockerfile is used to build a single Docker image, whereas a Docker Compose file is used to define and run multiple Docker containers that interact with each other.
.Files related to docker are stored in /var/lib/docker

📌Docker Commands:
.docker pull img_name:version - to pull image and not run
.docker run img_name:version - to pull image and run
.docker search keyword - search for Docker images on Docker Hub
.docker ps - to list all running containers
.docker ps -a -to list all containers
.docker stop container_name - to stop the container
.docker stop $(docker ps -aq) - to stop all the containers
.docker rm container_name - to remove the container
.docker rm $(docker ps -aq) -to remove all the containers
.docker container pause <container_id> - to pause running container
.docker container unpause <container_id> - to unpause container
.docker images - to list all images
.docker rmi img_name - to remove the image
.docker rmi $(docker images -aq) - to remove all the images
.docker image history img_name - history of image.
.docker run -d img_name - to run in detach mode (background)
.docker attach img_name or img_id - to attach
.docker run --name new_name img_name - to run container with new name
.docker rename old_name new_name - to rename a running container
.docker run -it img_name - to run in interactive way
.docker run -d --rm img_name - to run the container but when we use docker stop, it will also remove (--rm) the container.
.docker tag src_img:src_tag tar_img:targ_tag - to tag a Docker image with a specific name and version (to rename the image)
.docker inspect container_name or container_id - to see details of container
.docker image inspect img_name or img_id - to see details of image
.docker run img_name cat /etc/*release* - to display the release information (e.g., OS version).
.docker logs container_id or container_name - to see logs
.docker run -p <host_port>:<container_port> image-name -(host_port -my & container_port - web server)eg.docker run -p 8080:3306 mysql (so we can run multiple instances by changing the host_port).
.docker run -e key=value -e key=value img_name - env variable
.docker system prune - to remove all stopped container and unused images.
.docker build . - to build the docker image and it will randomly generate the image name.
.docker build -t img_name:tag . - to build the docker image with the specified name.
.docker push img_name - to push the docker image to docker hub repository
.docker login - for authentication
.docker-compose up - Starts and attaches to containers.
.docker-compose up --build - Rebuilds images and starts containers.
.docker-compose down - Stops and removes containers, networks, and volumes.
.docker-compose logs - Shows logs for all services.
.docker-compose build - Builds or rebuilds services.
.docker-compose ps - Lists running containers.
.docker-compose pull - Pulls images for all services.
.docker-compose rm - Removes stopped containers.
.docker stats - It provides information about CPU, memory, network, and disk I/O usage of all running containers.
.docker run --cpus=.5 container_name - the container is not allowed to use > 50% of the cpu at any pt in time.
.docker run --memory=100m container_name - the container is not allwoed to use >100mb memory.
.docker system df - information about Docker's disk usage.
.docker network ls - to list all network drivers.
.docker network inspect network_name - to view detailed information about a specific network, such as connected containers, IP ranges, and driver type.
.docker network create --driver=driver_type --subnet=subnet --gateway=gateway ntw_name - to create a custom network. (driver type- bridge/host/none)
.docker network rm net_name - to remove network
.docker network connect network_name container_name - to connect a Container to a Network.
.docker network disconnect network_name container_name - to disconnect a Container from a Network.
.docker network prune - to remove all unused Docker networks to free up resources.
.docker events - to know about the various events
.docker volume ls - to list all Docker volumes.
.docker volume inspect volume_name - Provides detailed information about a specific volume.
.docker volume create volume_name - to create volume
.docker volume rm volume_name - to delete a specific volume. The volume must not be in use by any container.
.docker volume prune - to remove all unused volumes.
.docker run -v volume_name:[container_path] image_name - to mount a volume into a container.


📌
.Use - for short options (single-character flags): -p (port mapping), -d (detached mode), -it (interactive and tty-Teletypewriter), -e (environment variable), -v (volume mapping)
.Use -- for long options (more descriptive, multi-character flags): --name (set container name), --rm (auto-remove container when stopped), --network (define network mode), --env (set environment variables), --publish (port mapping, same as -p)

📌
-a (all), ps (process status), -e (environment), -v (volume), df (disk free), -d (detached), -it (interactive terminal), -p (publish), --rm (remove), -t (tag), -q (quiet), -i (interactive), --env (environment), --stats (statistics)

📌Dockerfile example for nodejs app:
FROM base_img         	[Image_name:version]
WORKDIR /dir_name      	[Inside container it will create this folder as your working directory] 
COPY src dest         	[copy the content of src path to workdir path]
RUN installation_cmds 	[to install dependencies]
EXPOSE port           
CMD [cmds to run in string format]

FROM node:latest
WORKDIR /myApp
COPY . .
RUN npm install
EXPOSE 8000
CMD ["node","main.js"]

📌docker-compose.yaml file for postgres and redis:
version: "3.8"   //version of docker-compose format

services:
  my-postgres:      //container name(anything) 
    image: postgres 
    ports:
      - "5432:5432"
    environment: 
      POSTGRES_USER: postgres
      POSTGRES_DB: review
      POSTGRES_PASSWORD: password
    volumes:
      - .:/app

  my-redis:
    image: redis
    ports:
      - "6379:6379"

📌Docker Networking: Helps containers talk to each other.
. Docker has 3 network drivers:
-> Bridge- This is the default network that Docker uses when you create a new container.It allows to access ext. n/w. Hence it requires port mapping.
-> Host- (docker run -it --network=host container_name)- Here the container_n/w gets connected to host_n/w. Hence it doesn't req. port mapping.
-> None- (docker run -it --network=none container_name)- Here the container will not have internet connection.

📌Docker volumes: Stores data for containers.
.In docker the data associated with every container is temporary. so when the container is deleted, the data also gets deleted. 
step1: Update the docker file
FROM node:latest
RUN npm install -g nodemon
WORKDIR /app
COPY . .
RUN npm install
EXPOSE 8000
CMD [ "nodemon","main.js"]
step2:Now build the docker image using docker build -t img_name .
step3:Now use docker run --name container_name -p host_port:container_port --rm -v src_path:dest_path img_name   [Mounts a volume by mapping a directory on the host (src_path) to a directory inside the container (dest_path). This is useful for persisting data or sharing files between the host and container]

❓Que- Create a docker network as my-network of driver type- host and then deploy the mysql image named as mysql-demo with 2 env variables- db_name:user and db_password:pass123 and expose the port 8080 to 8000 as host , then add this image to the network my-network and also add volume from /ops to /var/lib/mysql.
Ans-
-> docker network create --driver=host my-network
-> docker run -d --name mysql-demo -e db_name=user -e db_password=pass123 -p 8000:8080 --network=my-network -v /ops:/var/lib/mysql mysql

❓Que- Let’s say you have created a Spring Boot application that needs to use a MySQL database. How would you set it up?
Ans-
Step 1: Create a custom Docker network
.docker network create my_network
Step 2: Pull and run the MySQL container
.docker pull mysql
.docker run --name mysql-container -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=userInfo --network my_network -d mysql:tag
Step 3: Build jar and create docker file.
1. Build the Spring Boot JAR:
./mvnw clean package   [By default, this JAR file is placed in the target/ directory of your project.]
2. Create the Dockerfile:
FROM openjdk:11-jre-slim
WORKDIR /app
COPY target/spring-app.jar spring-app.jar
EXPOSE 8080
ENTRYPOINT ["java", "-jar", "spring-app.jar"]
Step 4: Run your Spring Boot application in a container and in appln.prop. use spring.datasource.url=jdbc:mysql://mysql-container:3306/userInfo
.docker build -t spring-app .
.docker run -it --rm --name spring-app-container --network=my_network spring-app

The data in the mysql will remain even after stopping and starting the container. It will get removed only when container of mysql is removed.

❓Que- Follow-up : Now implement the same using docker-compose
Ans-
Step 1: create Jar and docker file.
Step 2: Create the docker-compose.yml File
version: '3.8'
services:
  mysql:
    image: mysql:latest
    container_name: mysql-container
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: userInfo
    networks:
      - my_network
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    restart: always

  spring-app:
    build: .       [It will build the image using dockerFile, so give path of dockerFile]
    container_name: spring-app-container
    networks:
      - my_network
    depends_on:
      - mysql
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-container:3306/userInfo
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root
    restart: always

networks:
  my_network:
    driver: bridge   [Default]

volumes:
  mysql-data:
    driver: local    [Default]

Step 3: Build and run with docker compose
Run the following command to build and start both MySQL and Spring Boot containers:
.docker-compose up --build

